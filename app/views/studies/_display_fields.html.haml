- require 'digest/sha1'
- require 'securerandom'




%fieldset
  
  - @xml = Nokogiri::XML.parse(xml)

  
  - builder = Nokogiri::HTML::Builder.new do |doc|
    
    - tags = @xml.xpath(xpath).each do |node|
      - root_node = node.parent
      - root_node_name = root_node.name.to_s
      - node_name = node.name.to_s == 'association' ? node.attribute('name').to_s : node.name.to_s
      - node_type = node.attribute('type').to_s
      - help = t(root_node_name+'.'+node_name+'.help')
      - required = !!node.attribute('required')
      - label = ( t(root_node_name+'.'+node_name+'.label')).html_safe
      
      
      
      - is_multiple = (node.attribute('multiple').to_s == '' || node.attribute('multiple').to_s == 'false') ? false : true
      
      - multiple = !!node.attribute('multiple') == true ? 'multiple' : false
      - prompt = node.attribute('prompt') == nil ? t('Please select') : node.attribute('prompt')
      - title_help = t(root_node_name+'.'+node_name+'.help')
      - is_complex_assoc = node.search('.//property').size.to_s == '2'
      - class_name = node.attribute('class_name').to_s
      
      - edit_form = session[:current_study_id] != nil
      
      
      
          
      - if node.attribute('display').to_s != 'private'
        
        - if node_type == 'association'
        
          - add_button_list = call_jst('button_list.jst.eco',{ name:node_name, orgunit: t("orgunit.label"), person: t("person.label"), title:t('help'), title_help:t(root_node_name+'.'+node_name+'.help'), type:'association' })
          - is_complex_assoc = !! node.attribute('complex')
          - assoc_type = is_complex_assoc==true ? 'complex': 'simple'
          - has_popup = node.attribute('popup').to_s == 'true' ? 'launch_popup' : 'no_popup'
        
          - link = link_to_add_association(' ', f, node_name.to_sym, 
            :partial=>'/studies/display_fields', :render_options => {:locals => {:xml=>Object.const_get(class_name.capitalize).xml_form.to_xml,  
            :xpath=>'/'+class_name.to_s.singularize.downcase+'/*'}, },:data => {"association-insertion-method" => "before" },)
          
          - link = Nokogiri::HTML.fragment(link)
          - a = link.css('a[@class="add_fields"]').attribute('data-association-insertion-template')
          

          %div{:id=>node.attribute('name'), 'data-label'=>label, 'data-plural-name'=>t('edit-box.'+node_name.singularize).pluralize, 'data-singular-name'=>t('edit-box.'+node_name.singularize).capitalize, 'data-required'=>required, :class=>'association_'+assoc_type+' '+has_popup}

            = f.input node_name, :wrapper => :append, :label => label, :required=>required do
              - if is_complex_assoc

                != call_jst('button_list.jst.eco',{ name:node_name, orgunit: t("orgunit.label"), person: t("person.label"), title:t('help'), title_help:t(root_node_name+'.'+node_name+'.help'),type:'association' })

                != link
              - else
                != call_jst('button_add.jst.eco', {type:'association', name:node_name}).html_safe
                != link
                
              
              != gen_help_button({title_help:t(root_node_name+'.'+node.attribute('name')+'.help')} )
          
             

          -accordion_nodes = ['notes','identifiers', 'affiliations', 'keywords', 'descriptions', 'awards', 'addresses', 'orgunits', 'persons', 'funding_agent_names']
          -box_nodes = ['authors', 'contacts', 'copyright_holders', 'depositors', 'distributors', 'editors', 'interviewers_unknowns', 'interviewers', 'projects']
          
          
          - datas = f.object.send(node_name)
          
          
          -uid2 = SecureRandom.uuid
          -uid = SecureRandom.uuid
          
          - if ! datas.empty?
           
            - index = 0

            = f.fields_for node_name do |ff|
              
              - index++
              
              - if node_name.in? accordion_nodes
              
                = render(:partial=>'/shared/accordion', :locals=>{:uid=>SecureRandom.uuid, 
                :uid2=>SecureRandom.uuid, 
                :title=>node_name.singularize+' '+ (index+1).to_s,
                :content=>render(:partial=>'/studies/display_fields', :locals=>{:f=>ff, :rec_type=>node_name, 
                :edit=>true,:xml=>Object.const_get(class_name.capitalize).xml_form.to_xml,  
                :xpath=>'/'+class_name.to_s.singularize.downcase+'/*'})})
              

              - else

                =render(:partial=>'/shared/edit_box', :locals=>{:uid2=>uid2, :label_link=>node_name.singularize+' '+ (index+1).to_s})
            
              
                != call_jst('modal.jst.eco',  {id:'content-'+uid2, title:class_name, content:render(:partial=>'/studies/display_fields', :locals=>{:f=>ff, :rec_type=>node_name, 
                :edit=>true,:xml=>Object.const_get(class_name.capitalize).xml_form.to_xml,  
                :xpath=>'/'+class_name.to_s.singularize.downcase+'/*'})})
                
        
          -if required
            %input{:type=>'hidden', :id=>'hidden-'+node_name, :required=>'required', :name=>'validation-'+node_name, :class=>'hidden-association'}
          -else
            %input{:type=>'hidden', :id=>'hidden-'+node_name, :name=>'validation-'+node_name, :class=>'hidden-association'}
             

        - if node.attribute('type').to_s == 'text'
        
          
        
          = f.input node.name, :wrapper => :prepend_append, :label => label, :required=>required do
            = #content_tag node.name, label, class: "add-on"
            = f.input_field node.name, 'multiple'=>multiple, 'placeHolder'=>t("type_something"), :required=>required
            != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )            
            - if is_multiple
              != call_jst('button_add.jst.eco', {type:'single', name:node_name})
            
            
            -#
            
              - if fedora_object != false
                
                - if fedora_object.class.method_defined? node_name
                  
                  - values = fedora_object.send(node_name)
                  
                  - if ! values.blank?
                    
                    - if values.kind_of?(String)
                      - values = [values]
                
                    - values.each_with_index do |value, index|
                      
                      %div{:class=>'input-append input-prepend', :style=>'display:block;'}
                        = f.input_field node.name, 'multiple'=>multiple, 'value'=>value, 'placeHolder'=>t("type_something"), :required=>required
                        - if index == 0
                          - if is_multiple
                            != call_jst('button_add.jst.eco', {type:'single', name:node_name})
                          != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )   
                        - else
                          != call_jst('button_remove.jst.eco' )
                        
                     
                  -else
                    = f.input_field node.name, 'multiple'=>multiple, 'value'=>'', 'placeHolder'=>t("type_something"), :required=>required
                    != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )            
                    - if is_multiple
                      != call_jst('button_add.jst.eco', {type:'single', name:node_name})
                    
                -else
                  = f.input_field node.name, 'multiple'=>multiple, 'value'=>'', 'placeHolder'=>t("type_something"), :required=>required
                  != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )            
                  - if is_multiple
                    != call_jst('button_add.jst.eco', {type:'single', name:node_name})
                  
                  
              -else
            
                = f.input_field node.name, 'multiple'=>multiple, 'value'=>'', 'placeHolder'=>t("type_something"), :required=>required
                != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )            
                - if is_multiple
                  != call_jst('button_add.jst.eco', {type:'single', name:node_name})
                
             
            
                        
        - if node.attribute('type').to_s == 'hidden'

          = f.input node_name, :input_html => { :value => node.attribute('value'), 'data-name'=>node_name }, :as => :hidden
          
          
          
        - if node.attribute('type').to_s == 'checkbox'
          -collection = Hash.new
          -eval(node.attribute('collection')).each{|k,v| collection[k.to_s] = v.to_s}
          - label =  node.name + '' +gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')}  ) 
          
          != f.input node.name,  :wrapper=>"prepend_append",:label=>label.html_safe, :collection => collection, :required=>required, input_html: { :required => required }, :as => :check_boxes
            
            
            
        
        - if node.attribute('type').to_s == 'radio_buttons'
          = f.input node.name, :required=>required, :label=>label, :required=>required, :collection => eval(node.attribute('collection').to_s), :as => :radio_buttons
        
        - if node.attribute('type').to_s == 'country'
          - label =  node.name + '' + gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')}  ) 
          = f.input node_name, :label=>label.html_safe,:required=>required, :input_html=>{'multiple'=>multiple}, :as => :country, :priority_countries => ['France', 'Germany'], :include_blank => t('Please choose country...')
     
        - if node.attribute('type').to_s == 'date'
          = f.input node_name, :wrapper => :prepend_append, :required=>required, :label=>label do
            
            = f.text_field(node_name, options = {'data-date-view-mode'=>node.attribute('viewMode'),'data-date-min-view-mode'=>node.attribute('minViewMode'),  'data-provide'=>'datepicker', 'data-date-format'=>node.attribute('format'), 'required'=>node.attribute('required'), 'value'=>'', 'class'=>'span3', 'placeHolder'=>t("date_click")} )

            - if is_multiple
              != call_jst('button_add.jst.eco', {type:'association', name:node_name}).html_safe
            
            != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )    
             
              
        - if node.attribute('type').to_s == 'language_list'
          = f.input node.name, :wrapper=>'append', :required=>required do
            = f.select node.name, grouped_options_for_select(@LOCATIONS), {:include_blank =>true}, { :required => required, :multiple=>is_multiple }
            !=gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )
          
          -#
            - if fedora_object != false
                
              - if fedora_object.class.method_defined? node_name
                  
                - values = fedora_object.send(node_name)
                - if values.kind_of?(String)
                  - values = [values]
            
                = f.input node.name, :wrapper=>'append', :required=>required do
                  = f.select node.name, grouped_options_for_select(@LOCATIONS, values), {:include_blank =>true}, { :required => required, :multiple=>is_multiple }
                  !=gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )            
            -else
              = f.input node.name, :wrapper=>'append', :required=>required do
                = f.select node.name, grouped_options_for_select(@LOCATIONS), {:include_blank =>true}, { :required => required, :multiple=>is_multiple }
                !=gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )
        
      
        - if node.attribute('type').to_s == 'select'
          -collection = Hash.new
          -eval(node.attribute('collection')).each{|k,v| collection[k.to_s] = v.to_s}
          = f.input node_name, :wrapper => :prepend_append, :label => label do
            = f.select node_name, options_for_select(collection), {:include_blank =>true}, { :required => required, :multiple=>is_multiple }
            !=gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )  
          -#
            - if fedora_object != false
                  
                - if fedora_object.class.method_defined? node_name
                    
                  - values = fedora_object.send(node_name)
                  - if values.kind_of?(String)
                    - values = [values]
                    
          
                  = f.input node_name, :wrapper => :prepend_append, :label => label do
                    = f.select node_name, options_for_select(collection, values), {:include_blank =>true}, { :required => required, :multiple=>is_multiple }
                    !=gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )  
    
              - else
                = f.input node_name, :wrapper => :prepend_append, :label => label do
                  = f.select node_name, options_for_select(collection), {:include_blank =>true}, { :required => required, :multiple=>is_multiple }
                  !=gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )  
                  

          
        - if node.attribute('type').to_s == 'text_area'
          
          - label =  node.name + gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )
          
          
          = f.input node.name, :label=>label.html_safe do
            = f.text_area node_name, :multiple=>multiple, :required=>node.attribute('required'), :class=>'span3',:placeHolder=>t("type_something")
            
            
            
            - if is_multiple
              != call_jst('button_add.jst.eco', {type:'single', name:node_name})
    
          
          
          -#
            - if fedora_object.class.method_defined? node_name
  
              - values = fedora_object.send(node_name)
              
            
              - if ! values.blank?
                
                - if values.kind_of?(String)
                  - values = [values]
                
                - values.each_with_index do |value, index|
                  
           
                  
                  = f.input node.name, :label=>label.html_safe do
                    = f.text_area node_name, :value=>value, :multiple=>multiple, :required=>node.attribute('required'), :class=>'span3',:placeHolder=>t("type_something")
  
                    - if index == 0
                      - if is_multiple
                        != call_jst('button_add.jst.eco', {type:'single', name:node_name})
                        
                    - else
                      != call_jst('button_remove.jst.eco' )
  
              -else
                = f.input node.name, :label=>label.html_safe do
                  = f.text_area node_name, :value=>'', :multiple=>multiple, :required=>node.attribute('required'), :class=>'span3',:placeHolder=>t("type_something")
                  
                  
                  
                  - if is_multiple
                    != call_jst('button_add.jst.eco', {type:'single', name:node_name})
        
      
        
        
        
          
           
          
          
                         
                                     
                                      