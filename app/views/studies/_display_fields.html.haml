%fieldset
  - @xml = Nokogiri::XML.parse(xml)
  
  - builder = Nokogiri::HTML::Builder.new do |doc|
    - tags = @xml.xpath(xpath).each do |node|
      - root_node = node.parent
      - root_node_name = root_node.name.to_s
      - label = t(root_node.name.to_s+'.'+node.name.to_s+'.label')
      - node_name = node.name.to_s
      - help = t(root_node_name+'.'+node_name+'.help')
      - required = node.attribute('required')
      - is_multiple = node.attribute('multiple').to_s == 'true' ? true : false
      
      
      - if node.attribute('display').to_s != 'private'
      
      
        - if node.name == 'association'
        
        
          -properties = node.xpath("properties//property")
          
          - node_name = node.attribute('name').to_s
          - label = t(root_node_name+'.'+node.attribute('name')+'.label')
           
          - add_button_list = gen_add_button('button_list.jst.eco',{ name:node_name, orgunit: t("orgunit.label"), person: t("person.label"), title:t('help'), title_help:t(root_node_name+'.'+node.attribute('name')+'.help'),type:'association' })
          
          
          %div{:id=>node.attribute('name'), 'data-singular-name'=>t('edit-box.'+node_name.singularize)} 
            - class_name = node.search('.//property').attribute('class_name').to_s
            = f.input node_name, :wrapper => :append, :label => label do
              = #content_tag node_name,  label, class: "add-on"  
              - if node.search('.//property').size.to_s == '2'
                != add_button_list
              - else
                = button_tag(type: 'button', class:"btn add", 'id'=>'add-'+node_name, 'data-action'=>'add-association') do
                  = content_tag(:i, '', class:"icon-plus")
              != gen_help_button({title_help:t(root_node_name+'.'+node.attribute('name')+'.help')} )
            
            - properties.each do |prop|
              - class_name=prop.attribute('class_name').to_s().downcase
              - metadata_class = class_name.capitalize+'Metadata'
      
              - link = link_to_add_association(' ', f, prop.attribute('name').to_s.to_sym, 
                :partial=>'/studies/display_fields', 
                :render_options => {:locals => {:xml=>Object.const_get(metadata_class).xml_form.to_xml, :xpath=>'/'+class_name.to_s.singularize+'/*'}, },:data => {"association-insertion-method" => "before" },)
      
              - html = Nokogiri::HTML(link)   
              - a = html.css('a')
              
              
                   
              - if node.attribute('popup').to_s == 'false'
                != a[0]['data-association-insertion-template']
                
              %div
                =link
         
        - if node.attribute('type').to_s == 'text' 
        
          = f.input node.name, :wrapper => :prepend_append, :label => label do
            = #content_tag node.name,  label, class: "add-on"
            
            
 
           
            = f.input_field node.name, 'multiple'=>is_multiple, 'value'=>'', 'required'=>required, 'placeHolder'=>t("type_something")
            
            - if node.attribute('multiple').to_s == 'true'
              = button_tag(type: 'button', class:"btn add", 'id'=>'add-'+node_name, 'data-action'=>'add-single') do
                = content_tag(:i, '', class:"icon-plus")
         
            
                
                
            != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )
                                             
        - if node.attribute('type').to_s == 'hidden'          
          = f.input node.name, :input_html => { :value => node.attribute('value') }, :as => :hidden
          
          
          
        - if node.attribute('type').to_s == 'checkbox'   
          = f.input node_name, :wrapper => :prepend_append, :label => false do
            
            = f.input node.name, :required=>required, :label=>label, :collection => eval(node.attribute('collection').to_s), input_html: { :multiple => is_multiple }, :as => :check_boxes
            != gen_help_button({title_help:t(root_node_name+'.'+node_name+'.help')} )
        
        - if node.attribute('type').to_s == 'radio_buttons'
          = f.input node.name, :label=>label, :required=>required, :collection => eval(node.attribute('collection').to_s), :as => :radio_buttons
        
        - if node.attribute('type').to_s == 'country'
          = f.input node_name, :label=>label,:required=>required, :input_html=>{'multiple'=>is_multiple}, :as => :country, :priority_countries => ['France', 'Germany'], :include_blank => t('Please choose country...')
         
        
        - if node.attribute('type').to_s == 'date'
          = f.input node_name, 
            :label=>label, 
            :input_html=>{'data-date-view-mode'=>node.attribute('viewMode'),
            'data-date-min-view-mode'=>node.attribute('minViewMode'),  
            'data-provide'=>'datepicker', 
            'data-date-format'=>node.attribute('format'), 
            'required'=>node.attribute('required'), 
            'value'=>'', 'class'=>'span3', 'placeHolder'=>t("date_click")}                                         
        
        
        - if node.attribute('type').to_s == 'language_list'
          = f.input node.name do
            = gen_select(f, node, grouped_options_for_select(@LOCATIONS), t("choose_language"))
          

          
        - if node.attribute('type').to_s == 'text_area'
          = f.input node.name do
            = f.text_area node_name, :value=>'', :multiple=>is_multiple, :required=>node.attribute('required'), :class=>'span3',:placeHolder=>t("type_something")
          
          
          
                         
                                     
                                      